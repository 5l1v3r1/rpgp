jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - ${{ if ne(parameters.name, 'Windows') }}:
    # Linux and macOS.
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install rust
  - ${{ if startsWith(parameters.name, 'Windows') }}:
    # Windows.
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain nightly
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      displayName: Install rust (windows)
  # All platforms.
  - script: |
      git submodule update --init --recursive
    displayName: "Fetch git submodule"
  - script: |
        rustc -Vv
        cargo -V
    displayName: Query rust and cargo versions
  - ${{ if ne(parameters.name, 'Windows') }}:
    - script: ci/run.sh
      env:
        TARGET: ${{ parameters.target }}
      displayName: Test
    - script: ci/build.sh
      env:
        TARGET: ${{ parameters.target }}
      displayName: Build
  - ${{ if eq(parameters.name, 'Windows') }}:
    - script: ci\run.sh
      env:
        TARGET: ${{ parameters.target }}
      displayName: Test
    - script: |
        rustup target add $TARGET || true
        cargo build --release --features nightly -p pgp_ffi --target %TARGET%
        mkdir release release\lib release\lib\pkgconfig release\include
        dir *.*
        dir target\%TARGET%
        dir release
        copy target\%TARGET%\release\pgp_ffi.dll release\lib\librpgp.dll
        copy target\%TARGET%\release\librpgp.h release\include\librpgp.h
      env:
        TARGET: ${{ parameters.target }}
      displayName: Build
  - ${{ if eq(parameters.name, 'Windows') }}:
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: 'release'
          archiveType: 'zip'
          archiveFile: "$(Build.ArtifactStagingDirectory)/librpgp-${{ parameters.target }}.zip"
          replaceExistingArchive: true
  - ${{ if ne(parameters.name, 'Windows') }}:
      - task: CopyFiles@2
        inputs:
          contents: "librpgp-${{ parameters.target }}.tar.gz"
          targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: "librpgp-$(Build.SourceVersion)-${{ parameters.target }}"
